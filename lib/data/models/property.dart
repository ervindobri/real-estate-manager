// This file is "main.dart"
///No, it's not. It's property.dart *insert Patric on the phone meme
import 'package:flutter/foundation.dart';
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:skawa/core/enums.dart';
import 'package:skawa/data/models/location.dart';

// required: associates our `main.dart` with the code generated by Freezed
part 'property.freezed.dart';
// optional: Since our Person class is serializable, we must add this line.
// But if Person was not serializable, we could skip it.
part 'property.g.dart';

// Note: only the fields that are used in the widget are being parsed
@freezed
class Property with _$Property {
  const factory Property(
      {required String name,
      required Type assignmentType,
      required List<EstateType> estateTypes,
      required List<Location> locations,
      required int? minPrice,
      required int? maxPrice,
      required int? minFloorArea,
      required int? maxFloorArea,
      required int? minUnitPrice,
      required int? maxUnitPrice}) = _Property;

  factory Property.fromJson(Map<String, Object?> json) =>
      _$PropertyFromJson(json);
}

// Note: this could be improved, quick solution
///Data classes should't be responsible for their own translation
extension PropertyExt on Property {
  String get priceFormatted {
    if (minPrice != null) {
      if (minPrice! / 1000000 > 0) {
        if (maxPrice == null) {
          return "${minPrice! / 1000000} millió Forint";
        }
        return "${(minPrice! / 1000000).toStringAsFixed(0)} - ${(maxPrice! / 1000000).toStringAsFixed(0)} millió Forint";
      } else if (minPrice! / 1000 > 0) {
        return "${(minPrice! / 1000).toStringAsFixed(0)} - ${(maxPrice! / 1000).toStringAsFixed(0)} ezer Forint";
      }
    }
    return "${(minPrice! / 1000).toStringAsFixed(0)} - ${(maxPrice! / 1000).toStringAsFixed(0)} Forint";
  }

  String get baseAreaFormatted {
    if (maxFloorArea == null) {
      return "$minFloorArea + m2";
    }
    return "";
  }
}
